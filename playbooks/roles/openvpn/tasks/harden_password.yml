---
- name: OpenVPN | Harden Password | Set minimum password length
  ansible.builtin.set_fact:
    password_min_length: 15

- name: OpenVPN | Harden | Disable login with empty passwords
  ansible.builtin.replace:
    regexp: 'nullok_secure'
    replace: ''
    dest: "{{ path_pam_system_auth }}"

- name: OpenVPN | Harden | Disable login with empty passwords
  ansible.builtin.replace:
    regexp: 'nullok'
    replace: ''
    dest: "{{ path_pam_system_auth }}"

- name: OpenVPN | Harden Password | Configure pwquality.conf
  ansible.builtin.lineinfile:
    dest: /etc/security/pwquality.conf
    regexp: "{{ item.reg }}"
    line: "{{ item.line }}"
    state: present
  with_items:
    - {reg: '^dcredit[\s]*=[\s]*(-?\d+)(?:[\s]|$)', line: 'dcredit = -1'}
    - {reg: '^minlen[\s]*=[\s]*(-?\d+)(?:[\s]|$)', line: 'minlen = {{ password_min_length }}'}
    - {reg: '^ucredit[s\]*=[\s]*(-?\d+)(?:[\s]|$)', line: 'ucredit = -2'}
    - {reg: '^ocredit[\s]*=[\s]*(-?\d+)(?:[\s]|$)', line: 'ocredit = -2'}
    - {reg: '^lcredit[\s]*=[\s]*(-?\d+)(?:[\s]|$)', line: 'lcredit = -2'}
    - {reg: '^difok[\s]*=[\s]*(\d+)(?:[\s]|$)', line: 'difok = 15'}

- name: OpenVPN | Harden Password | Set minimum password length in login.defs
  ansible.builtin.lineinfile:
    dest: /etc/login.defs
    regexp: ^PASS_MIN_DAYS\s+
    line: "PASS_MIN_DAYS {{ password_min_length }}"
    state: present

- name: OpenVPN | Harden Password | Set hashing algorithm to SHA512
  ansible.builtin.lineinfile:
    dest: "{{ path_pam_password_auth }}"
    regexp: (^\s*password\s+(?:(?:sufficient)|(?:required)|(?:\[.*\]))\s+pam_unix\.so)\s+(.*)(md5|bigcrypt|sha256|blowfish)(.*)
    line: \1 \2 sha512 \4
    state: present
    backrefs: true

- name: OpenVPN | Harden Password | Set hashing algorithm to SHA512
  ansible.builtin.lineinfile:
    dest: /etc/login.defs
    regexp: ^ENCRYPT_METHOD\s+
    line: ENCRYPT_METHOD SHA512
    state: present

- name: OpenVPN | Harden Password | Check for libuser.conf
  stat:
    path: /etc/libuser.conf
  register: libuser_conf

- name: OpenVPN | Harden Password | Set hashing algorithm to SHA512
  lineinfile:
    dest: /etc/libuser.conf
    regexp: ^crypt_style\s*=
    line: crypt_style = sha512
    state: present
  when: libuser_conf.stat.exists

# - name: OpenVPN | Harden Password | Limit password reuse
#   lineinfile:
#     dest: "{{ path_pam_password_auth }}"
#     regexp: (^\s*password\s+(?:(?:sufficient)|(?:required)|(?:\[.*\]))\s+pam_unix\.so)\s+((?!.*\s+remember=5\s*.*).*)
#     line: \1 \2 remember=5
#     state: present
#     backrefs: true
#
# - name: OpenVPN | Harden Password | Set max/min password age
#   lineinfile:
#     dest: /etc/login.defs
#     regexp: "{{ item.reg }}"
#     line: "{{ item.line }}"
#     state: present
#   with_items:
#     - {reg: '^PASS_MIN_DAYS[\s]*', line: 'PASS_MIN_DAYS 1'}
#     - {reg: '^PASS_MAX_DAYS[\s]*', line: 'PASS_MAX_DAYS 60'}
#
# - name: OpenVPN | Harden Password | Set deny for failed password attempts
#   lineinfile:
#     dest: "{{ item }}"
#     line: 'auth [default=die] pam_faillock.so authfail deny=3 unlock_time=604800 fail_interval=900'
#     insertafter: '^auth[\s]+(?:(?:sufficient)|(?:required)|(?:\[.*\]))\s+pam_unix.so'
#     state: present
#   with_items: "{{ deny_failed_login_auth_files }}"
#
# - name: OpenVPN | Harden Password | Set deny for failed password attempts
#   lineinfile:
#     dest: "{{ item }}"
#     line: 'auth required pam_faillock.so preauth silent deny=3 unlock_time=604800 fail_interval=900'
#     insertbefore: '^auth[\s]+(?:(?:sufficient)|(?:required)|(?:\[.*\]))\s+pam_unix.so'
#     state: present
#   with_items: "{{ deny_failed_login_auth_files }}"
#
# - name: OpenVPN | Harden Password | Set deny for failed password attempts
#   lineinfile:
#     dest: "{{ item }}"
#     line: 'account required pam_faillock.so'
#     insertbefore: '^account[\s]+(?:(?:sufficient)|(?:required)|(?:\[.*\]))\s+pam_unix.so'
#     state: present
#   with_items:  "{{ deny_failed_login_account_files }}"
